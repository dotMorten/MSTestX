<Project Sdk="MSBuild.Sdk.Extras/3.0.23">

  <PropertyGroup>
    <TargetFrameworks>net7.0-ios;net7.0-android;net7.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net7.0-windows10.0.19041.0</TargetFrameworks>
    <GeneratePackageOnBuild Condition="'$(Configuration)'=='Release'">true</GeneratePackageOnBuild>
    <PackageId>MSTestX.UnitTestRunner</PackageId>
    <AssemblyName>MSTestX.UnitTestRunner</AssemblyName>
    <RootNamespace>MSTestX.UnitTestRunner</RootNamespace>
    <Authors>Morten Nielsen</Authors>
    <Product>MSTestX</Product>
    <PackageProjectUrl>https://github.com/dotMorten/MSTestX</PackageProjectUrl>
    <Copyright>Copyright 2018-$([System.DateTime]::Now.ToString('yyyy')) Morten Nielsen</Copyright>
    <PackageOutputPath>../../../nupkg</PackageOutputPath>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <PackageTags>Unit Test, Xamarin, Android, iOS, Test, Testing, MSTest, VSTest, TestFX, TRX, MAUI</PackageTags>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <FileVersion>2.0.0.0</FileVersion>
    <Version>2.0.0-rc.1</Version>
    <Description>A .NET MAUI-based UnitTest Runner to execute MSTests on Android, iOS and MacCatalyst. The app supports custom test logging, and has built-in support for outputting a TRX test report and being remote controlled from commandline.</Description>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
    <PackageReleaseNotes>Added support for .NET MAUI</PackageReleaseNotes>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <LangVersion>10</LangVersion>


    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">14.2</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">14.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
  </PropertyGroup>

  <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible($(TargetFramework), 'net6.0'))">
    <UseMaui>true</UseMaui>
    <DefineConstants>$(DefineConstants);MAUI</DefineConstants>
    <SingleProject>true</SingleProject>
  </PropertyGroup>
    
  <PropertyGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">
    <DefineConstants>$(DefineConstants);WINDOWS</DefineConstants>
  </PropertyGroup>
  
  <!-- The Microsoft.TestPlatform.TestHost has all this, but unfortunately doens't currently compile for .NET Standard targets.
       See https://github.com/Microsoft/vstest/issues/1790 -->
  <ItemGroup>
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\Messages\**\*.cs">
      <Link>CommunicationUtilities\Messages\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Compile>
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\Serialization\**\*.cs">
      <Link>CommunicationUtilities\Serialization\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Compile>
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\Interfaces\ICommunicationManager.cs" Link="CommunicationUtilities\Interfaces\ICommunicationManager.cs" />
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\Interfaces\IDataSerializer.cs" Link="CommunicationUtilities\Interfaces\IDataSerializer.cs" />
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\JsonDataSerializer.cs" Link="CommunicationUtilities\JsonDataSerializer.cs" />
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\SocketCommunicationManager.cs" Link="CommunicationUtilities\SocketCommunicationManager.cs" />
    <Compile Include="..\..\..\vstest\src\Microsoft.TestPlatform.CommunicationUtilities\SocketConstants.cs" Link="CommunicationUtilities\SocketConstants.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.TestPlatform.Extensions.TrxLogger" Version="17.1.0" />
    <PackageReference Include="SQLitePCLRaw.bundle_green" Version="2.1.0" />
    <PackageReference Include="sqlite-net-pcl" Version="1.8.116" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <!--<PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />-->
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\MSTestX.Adapter\MSTestX.Adapter.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\..\Automation\MSTestX.Console\bin\net5.0\publish\*.dll" Pack="true" Link="tools\TestConsole\%(Filename)%(Extension)" PackagePath="tools\TestConsole\%(Filename)%(Extension)" />
    <None Include="..\..\..\Automation\MSTestX.Console\bin\net5.0\publish\MSTestX.Console.runtimeconfig.json" Pack="true" Link="tools\TestConsole\MSTestX.Console.runtimeconfig.json" PackagePath="tools\TestConsole" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Views\AttachmentPage.xaml">
      <Generator>MSBuild:UpdateDesignTimeXaml</Generator>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="BuildAndPublishConsoleRunner" BeforeTargets="Build" Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
      <PublishConsoleRunnerCmd>dotnet publish "$(MSBuildThisFileDirectory)..\..\..\Automation\MSTestX.Console\MSTestX.Console.csproj" -c $(Configuration) -f net5.0</PublishConsoleRunnerCmd>
    </PropertyGroup>
    <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
      <PublishConsoleRunnerCmd>dotnet publish "$(MSBuildThisFileDirectory)../../../Automation/MSTestX.Console/MSTestX.Console.csproj" -c $(Configuration) -f net5.0</PublishConsoleRunnerCmd>
    </PropertyGroup>
    <Exec ConsoleToMsBuild="true" Command="$(PublishConsoleRunnerCmd)" />
  </Target>

</Project>
